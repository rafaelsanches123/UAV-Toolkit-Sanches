#Author: Jesimar da Silva Arantes
#Date: 16/08/2017
#Last Update: 17/08/2018
#Description: Properties file of IFA, MOSA and GCS systems.
#Descricao: Arquivo de propriedades dos sistemas IFA, MOSA, GCS e S2DK.
#has 101 parameters/configurations

#----------------------------SOFTWARE MODULES---------------------------

#===========================GLOBAL PARAMETERS===========================

#property description: operation mode
#data type: String   <->   [SITL, HITL, REAL_FLIGHT]
#SITL         -> Software-In-The-Loop run on Personal Computer (PC)
#HITL         -> Hardware-In-The-Loop run on Companion Computer (CC)
#REAL_FLIGHT  -> Real Flight run on CC in real drone
prop.global.operation_mode=SITL

#property description: type of Companion Computer (CC) used in this experiment
#data type: String   <->   [EDISON, RASPBERRY, BEAGLE_BONE, ODROID, GALILEO]
#EDISON      -> Companion Computer model Intel Edison
#RASPBERRY   -> Companion Computer model Raspberry Pi 2, 3
#BEAGLE_BONE -> Companion Computer model BeagleBone Black Wireless		[not yet supported]
#ODROID      -> Companion Computer model Odroid C1						[not yet supported]
#GALILEO     -> Companion Computer model Intel Galileo					[not yet supported]
prop.global.type_cc=RASPBERRY

#property description: type of AutoPilot (AP) used in this experiment
#data type: String   <->   [APM, PIXHAWK]
#APM        -> AutoPilot model APM
#PIXHAWK    -> AutoPilot model Pixhawk
prop.global.type_ap=APM

#property description: type of aircraft
#data type: String   <->   [ROTARY_WING, FIXED_WING]
#ROTARY_WING   -> rotary wing aircraft - quadricopter - iDroneAlpha
#FIXED_WING    -> fixed wing aircraft - Ararinha						[not yet supported]
prop.global.type_aircraft=ROTARY_WING

#property description: type of software data acquisition of uav
#data type: String   <->   [DRONEKIT, FLYTOS, MAVLINK]
#DRONEKIT   -> use software UAV-S2DK
#FLYTOS     -> use software UAV-S2FO (Services to FlytOS need to do)	[not yet supported]
#MAVLINK    -> use software UAV-S2ML (Services to MavLink need to do)	[not yet supported]
prop.global.type_data_acquisition=DRONEKIT

#property description: directory with the mission to be executed by drone (files to be copied to system)
#data type: String   <->   relative path
#examples: [../Missions/pos-iros1, ../Missions/pos-iros3, ../Missions/campus2ccqsp]
#note: do not put the end slash (/) in the name
prop.global.mission.dir=../Missions/Aula/aula2

#property description: relative altitude of the mission
#data type: double
#unit of measurement: meters
#interval: [0, +infiny)
#interval: [3.0, 30.0]
prop.global.mission.altitude_relative=5.0

#property description: frequency of updating the autopilot data to be recorded in the log file
#data type: double
#unit of measurement: hertz
#interval: (0, +infiny)
#recommended: 2
prop.global.freq_update_data_ap=2

#property description: system has route simplifier to minimize the number of waypoints
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> enable the route simplifier feature
#FALSE -> disable the route simplifier feature
prop.global.has_route_simplifier=FALSE

#property description: directory where several mission configuration files and security files are stored
#data type: String   <->   relative path
prop.global.dir_files=../Modules-Global/Files/

#property description: name of the feature mission file where the buzzer, camera photo, camera video and spraying is defined
#data type: String   <->   file name
prop.global.file.feature_mission=featureMission.txt

#property description: name of the reference geographic coordinates file
#data type: String   <->   file name
#note: File used by IFA (replanner) and MOSA (planner), but not used by Controller and FixedRoute
prop.global.file.geo_base=geoBase.txt

#property description: represents the ip of the machine where the IFA system is running
#data type: int
#data format: IP
#examples: [localhost, 192.168.205.220, 192.168.0.2, 192.168.43.2]
prop.global.comm.host_ifa=localhost

#property description: represents the ip of the machine where the MOSA system is running
#data type: int
#data format: IP
#examples: [localhost, 192.168.205.220, 192.168.0.2, 192.168.43.2]
prop.global.comm.host_mosa=localhost

#property description: ip on the computer where the UAV-S2DK is running
#data type: int
#data format: IP
prop.global.comm.host_s2dk=localhost

#property description: port used in communication between IFA and MOSA
#data type: int
#data format: NETWORK PORT
prop.global.comm.port_network_ifa_mosa=5555

#property description: port used in communication between IFA and UAV-GCS
#data type: int
#data format: NETWORK PORT
prop.global.comm.port_network_ifa_gcs=5556

#property description: port used in communication between MOSA and UAV-GCS
#data type: int
#data format: NETWORK PORT
prop.global.comm.port_network_mosa_gcs=5557

#property description: represents the network port of mavproxy for connection
#data type: int
#data format: NETWORK PORT
#usually: 14551 or 14550
prop.global.comm.port_network_mavproxy=14551

#property description: port used in communication between IFA or MOSA with UAV-S2DK (HTTP request server)
#data type: int
#data format: NETWORK PORT
prop.global.comm.port_network_s2dk=50000

#----------------------------HARDWARE MODULES---------------------------

#property description: has camera connected on the drone
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> indicates that the drone has the camera component
#FALSE -> indicates that the drone does not have the camera component
prop.hw.sensor.has_camera=FALSE

#property description: has sonar connected on the drone
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> indicates that the drone has the sonar component
#FALSE -> indicates that the drone does not have the sonar component
prop.hw.sensor.has_sonar=FALSE

#property description: has power module connected on the drone
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> indicates that the drone has the power module component
#FALSE -> indicates that the drone does not have the power module component
prop.hw.sensor.has_powermodule=TRUE

#property description: has temperature sensor connected on the drone
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> indicates that the drone has the temperature sensor component
#FALSE -> indicates that the drone does not have the temperature sensor component
prop.hw.sensor.has_temperature_sensor=FALSE

#property description: has buzzer connected on the drone
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> indicates that the drone has the buzzer component
#FALSE -> indicates that the drone does not have the buzzer component
prop.hw.actuator.has_buzzer=FALSE

#property description: has parachute connected on the drone
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> indicates that the drone has the parachute component
#FALSE -> indicates that the drone does not have the parachute component
prop.hw.actuator.has_parachute=FALSE

#property description: has LED connected on the drone
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> indicates that the drone has the led component
#FALSE -> indicates that the drone does not have the led component
prop.hw.actuator.has_led=FALSE

#property description: has spraying connected on the drone
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> indicates that the drone has the spraying component
#FALSE -> indicates that the drone does not have the spraying component
prop.hw.actuator.has_spraying=FALSE

#---------------------------------SENSORS-------------------------------

#===========================CAMERA PARAMETERS===========================

#property description: directory where is the used camera system
#data type: String   <->   relative path
prop.hw.sensor.camera.dir=../Modules-Global/Camera/

#property description: duration of the video
#data type: int
#unit of measurement: seconds
#interval: [0, +infiny)
prop.hw.sensor.camera.video.time=180

#property description: number of photos in sequence
#data type: int
prop.hw.sensor.camera.photo_in_sequence.number=4

#property description: delay between two photos
#data type: int
#unit of measurement: seconds
#interval: [0, +infiny)
prop.hw.sensor.camera.photo_in_sequence.delay=2

#============================SONAR PARAMETERS===========================

#property description: directory where is the used sonar system
#data type: String   <->   relative path
prop.hw.sensor.sonar.dir=../Modules-Global/Sonar/

#property description: pin used by the sonar sensor trig
#data type: int
prop.hw.sensor.sonar.pin_trig=40

#property description: pin used by the sonar sensor echo
#data type: int
prop.hw.sensor.sonar.pin_echo=38

#=========================POWER MODULE PARAMETERS=======================

#property description: minimum level of battery to detect it as fault, then an emergency landing mechanism is activated
#data type: int
#unit of measurement: percentage
#interval: [0, 100]
#recommended: 20
prop.hw.sensor.powermodule.level_min_battery=20

#======================TEMPERATURE SENSOR PARAMETERS====================

#property description: directory where is the used buzzer system
#data type: String   <->   relative path
prop.hw.sensor.temperature.dir=../Modules-Global/Temperature/

#property description: maximum level of temperature of battery to detect it as fault, then an emergency landing mechanism is activated
#data type: int
#unit of measurement: celsius degree
#interval: [-273, +infiny)
#recommended: 80
prop.hw.sensor.temperature.level_max_temperature=60

#property description: pin CLK (Clock) used by the temperature sensor max6675 [BCM24]
#data type: int
prop.hw.sensor.temperature.pin_clk=24

#property description: pin CS used by the temperature sensor max6675 [BCM4]
#data type: int
prop.hw.sensor.temperature.pin_cs=4

#property description: pin SO (data) used by the temperature sensor max6675 [BCM25]
#data type: int
prop.hw.sensor.temperature.pin_so=25

#-------------------------------ACTUATORS-------------------------------

#===========================BUZZER PARAMETERS===========================

#property description: directory where is the used buzzer system
#data type: String   <->   relative path
prop.hw.actuator.buzzer.dir=../Modules-Global/Buzzer/

#property description: signal pin used to connect the buzzer on the board (CC)
#data type: int
prop.hw.actuator.buzzer.pin=8

#===========================PARACHUTE PARAMETERS========================

#property description: directory where is the used parachute system
#data type: String   <->   relative path
prop.hw.actuator.parachute.dir=../Modules-Global/Parachute/

#=============================LED PARAMETERS============================

#property description: directory where is the used LED system
#data type: String   <->   relative path
prop.hw.actuator.led.dir=../Modules-Global/LED/

#==========================SPRAYING PARAMETERS==========================

#property description: directory where is the used spraying system
#data type: String   <->   relative path
prop.hw.actuator.spraying.dir=../Modules-Global/Spraying/

#--------------------------------AIRCRAFT-------------------------------

#property description: name of the aircraft
#data type: String
#examples: [iDroneAlpha, Ararinha]
prop.aircraft.name=iDroneAlpha

#property description: speed cruize of the aircraft   
#data type: double
#unit of measurement: meters/seconds
#interval: [0, +infiny)
#recommended: [iDroneAlpha: 2.0,   Ararinha: 20.0]
prop.aircraft.speed_cruize=2.0

#property description: speed max of the aircraft
#data type: double
#unit of measurement: meters/seconds
#interval: [0, +infiny)
#recommended: [iDroneAlpha: 10.0,   Ararinha: 30.0]
prop.aircraft.speed_max=10.0

#property description: mass of the aircraft
#data type: double
#unit of measurement: kg
#interval: [0, +infiny)
#recommended: [iDroneAlpha: 1.100,   Ararinha: 2.828]
prop.aircraft.mass=1.100

#property description: payload of the aircraft
#data type: double
#unit of measurement: kg
#interval: [0, +infiny)
#recommended: [iDroneAlpha: 0.400,   Ararinha: 0.600]
prop.aircraft.payload=0.400

#property description: endurance of the aircraft
#data type: double
#unit of measurement: seconds
#interval: [0, +infiny)
#recommended: [iDroneAlpha: 420.0,   Ararinha: 900.0]
prop.aircraft.endurance=420.0

#----------------------------SOFTWARE MODULES---------------------------

#-----------------------------PROPERTIES GCS----------------------------

#property description: enable Google Maps feature (google maps need the internet to work)
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> enable the google maps plot in GCS
#FALSE -> disable the google maps plot in GCS
prop.gcs.internet.has_googlemaps=TRUE

#property description: evaluates whether the Oracle Drone DataBase system exists
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> enable communication with Oracle Drone in a server
#FALSE -> disable communication with Oracle Drone in a server
prop.gcs.od.has_db=FALSE

#property description: represents the ip of the machine where the Oracle Drone DB is running
#data type: String
#data type: IP
#examples: localhost, 192.168.205.193
prop.gcs.od.host_od=192.168.205.105

#property description: represents the network port used to communicate with the Oracle Drone DB
#data type: int
#data format: NETWORK PORT
prop.gcs.od.port_od_gcs=3306

#property description: represents the user email of the Oracle Drone system to connect to the DB in real time
#data type: String
#data type: email address
prop.gcs.od.user_email=jesimar.arantes@gmail.com

#-----------------------------PROPERTIES IFA----------------------------

#===========================GLOBAL PARAMETERS===========================

#property description: system run by drone
#data type: String   <->   [REPLANNER, FIXED_ROUTE, CONTROLLER]
#REPLANNER       -> IFA uses a path replanner
#FIXED_ROUTE     -> IFA loads a fixed route
#CONTROLLER      -> IFA uses a controller for UAV (voice or keyboard)
prop.ifa.global.system_exec=REPLANNER

#=========================REPLANNER PARAMETERS==========================

#property description: local of method execution
#data type: String   <->   [ONBOARD, OFFBOARD]
#ONBOARD       -> executed on the aircraft's on-board computer (CC)
#OFFBOARD      -> running on the computer on ground (GCS)
prop.ifa.replanner.local_exec=ONBOARD

#property description: path replanner method used by drone
#data type: String   <->   [DE4s, GH4s, GA4s, MPGA4s, MS4s, GA-GA-4s, GA-GH-4s, Pre-Planned4s]
#DE4s               -> Differential Evolutionary 4 security				[supported by ONBOARD and OFFBOARD]
#GH4s               -> Greedy Heuristic 4 security						[supported by ONBOARD and OFFBOARD]
#GA4s               -> Genetic Algorithm 4 security						[supported by ONBOARD and OFFBOARD]
#MPGA4s             -> Multi-Population Genetic Algorithm 4 security	[supported by ONBOARD and OFFBOARD]
#MS4s               -> MultiStart 4 security							[supported by ONBOARD and OFFBOARD]
#GA-GA-4s           -> Two GA 4 security in parallel					[supported only by ONBOARD]
#GA-GH-4s           -> One GA and One GH 4 security in parallel			[supported only by ONBOARD]
#Pre-Planned4s      -> IFA loads a fixed route from a set of routes		[supported only by ONBOARD]
#G_PATH_REPLANNER4s -> Generic Path Replanner 4 security				[supported by ONBOARD and OFFBOARD]
prop.ifa.replanner.method=MPGA4s

#property description: command to execute the path replanner
#data type: String   <->   file name
prop.ifa.replanner.cmd_exec=./exec-replanner.sh

#property description: method execution time
#data type: double
#unit of measurement: seconds
#interval: [0, +infiny)
#good interval: [0.1, 2.0]
#recommended: 1.0
#note: is not used in GH4s and Pre-Planned4s
prop.ifa.replanner.time_exec=1.0

#property description: number of waypoints used in the path replanner method
#data type: int
#interval: [0, +infiny)
#good interval: [10, 60]
#recommended: 30
prop.ifa.replanner.number_waypoints=30

#property description: risk allocated during the mission (delta parameter)
#data type: double
#interval: [0, 1.0]
#recommended: 0.01
prop.ifa.replanner.delta=0.01

#property description: type of altitude decay of the emergency route
#data type: String   <->   [CONSTANT, LINEAR]
#CONSTANT  -> the drone goes to the region maintaining altitude and then lands vertically
#LINEAR    -> altitude decay linearly
#recommended: CONSTANT
prop.ifa.replanner.type_altitude_decay=CONSTANT

#=====================FIXED_ROUTE_STATIC PARAMETERS=====================

#property description: directory containing the security's fixed route files
#data type: String   <->   relative path
prop.ifa.fixed_route.dir=../Modules-IFA/Fixed-Route-Static4s/

#property description: fixed route file name
#data type: String   <->   file name
#example: route-emergencial.txt
prop.ifa.fixed_route.file_waypoints=route-emergencial.txt

#-----------------------------PROPERTIES MOSA---------------------------

#===========================GLOBAL PARAMETERS===========================

#property description: system run by drone
#data type: String   <->   [PLANNER, FIXED_ROUTE]
#PLANNER           -> MOSA uses a path planner
#FIXED_ROUTE       -> MOSA loads a fixed route
prop.mosa.global.system_exec=PLANNER

#===========================PLANNER PARAMETERS==========================

#property description: local of method execution
#data type: String   <->   [ONBOARD, OFFBOARD]
#ONBOARD   -> executed on the aircraft's on-board computer (CC)
#OFFBOARD  -> running on the computer on ground (GCS)
prop.mosa.planner.local_exec=ONBOARD

#property description: path planner method used by drone 
#data type: String   <->   [HGA4m, CCQSP4m, A_STAR4m, PATH_PLANNER4m]
#HGA4m            -> Hybrid Genetic Algorithm 4 mission					[supported by ONBOARD and OFFBOARD]
#CCQSP4m          -> Chance Constraint Qualitative State Plan 4 mission	[supported by ONBOARD and OFFBOARD]
#A_STAR4m         -> A* Algorithm 4 mission								[supported by ONBOARD and OFFBOARD] <-> [HAS A BUG!!!]
#G_PATH_PLANNER4m -> Generic Path Planner 4 mission						[supported by ONBOARD and OFFBOARD]
#note: HGA4m and CCQSP4m don't work in ARM architecture, i.e. Raspberry Pi, Odroid, Beagle Bone.
prop.mosa.planner.method=CCQSP4m #sobreecrever essa linha em relação ao planejador

#property description: command to execute the path planner 
#data type: String   <->   file name
#note: if HGA4m or CCQSP4m need arguments "local" or "edison", but are defined automatically
prop.mosa.planner.cmd_exec=./exec-planner.sh

#========================PLANNER HGA4m PARAMETERS=======================

#property description: mission processing location
#data type: String   <->   [GROUND, GROUND_AND_AIR, AIR]
#GROUND          -> the entire mission is calculated on ground													[supported by ONBOARD and OFFBOARD]
#GROUND_AND_AIR  -> the first two parts of the mission are done on the ground the rest is done in the air		[supported only by ONBOARD]
#AIR             -> only the first part of the mission is done on the ground all the rest in the air			[supported only by ONBOARD]
prop.mosa.planner.hga4m.local_exec_processing=GROUND

#property description: name of the waypoint file containing the mission
#data type: String   <->   file name
prop.mosa.planner.hga4m.file_mission=waypointsMission.txt

#property description: method execution time between each route
#data type1: double
#data type2: vector of double
#format 1: time
#format 2: [time1,time2,...timeN] 
#example: [30.0,40.0,20.0]
#unit of measurement: seconds
#interval: [0, +infiny)   <->   [for all components]
prop.mosa.planner.hga4m.time_exec=[4.0,4.0,4.0,4.0,4.0,6.0]

#property description: risk allocated during the mission (delta parameter)
#data type: double
#interval: [0.00, 1.00]
#recommended: 0.05
prop.mosa.planner.hga4m.delta=0.08

#property description: maximum drone speed used in the model
#data type: double
#unit of measurement: meters/seconds
#interval: [0, +infiny)
#recommended: 2.0   <->   [iDroneAlpha]
prop.mosa.planner.hga4m.max_velocity=2.0

#property description: maximum drone control used in the model
#data type: double
#unit of measurement: meters/(seconds^2)
#interval: [0, +infiny)
#recommended: 1.0
prop.mosa.planner.hga4m.max_control=1.0

#=======================PLANNER CCQSP4m PARAMETERS======================

#property description: number of waypoints used by method
#data type: int
#interval: [0, +infiny)
#recommended: time_horizon/2
prop.mosa.planner.ccqsp4m.waypoints=25

#property description: time horizon used by method
#data type: int
#interval: [0, +infiny)
#recommended: 60
prop.mosa.planner.ccqsp4m.time_horizon=50

#property description: risk allocated during the mission (delta)
#data type: double
#interval: [0.00, 1.00]
#recommended: 0.01
prop.mosa.planner.ccqsp4m.delta=0.01

#property description: means waypoints used for the obstacle avoidance
#data type: int
#interval: [1, +infiny)
#good interval: [4, 40]
#recommended: time_horizon/2
prop.mosa.planner.ccqsp4m.steps=20

#property description: standard deviation of drone position
#data type: double
#interval: [0, +infiny)
#good interval: [0, 0.65]
#recommended: 0.20
prop.mosa.planner.ccqsp4m.std_position=0.20

#=======================PLANNER A_STAR4m PARAMETERS=====================

#property description: name of the waypoint file containing the mission
#data type: String   <->   file name
prop.mosa.planner.astar4m.file_mission=waypointsMission.txt

#===================PLANNER G_PATH_PLANNER4m PARAMETERS=================

#property description: name of the waypoint file containing the mission
#data type: String   <->   file name
prop.mosa.planner.gpathplanner4m.file_mission=waypointsMission.txt

#=========================FIXED ROUTE PARAMETERS========================

#property description: directory containing the mission's fixed route files
#data type: String   <->   relative path
prop.mosa.fixed_route.dir=../Modules-MOSA/Fixed-Route4m/

#property description: fixed route file name 
#examples: [route-4wp.txt, route-iros-case1.txt, missao-teste.txt]
#data type: String   <->   file name
prop.mosa.fixed_route.file_waypoints=route-iros-case1.txt

#property description: fixed route is dynamic
#data type: Boolean   <->   [TRUE, FALSE]
#TRUE  -> change the drone route in the air
#FALSE -> only follows the default route
prop.mosa.fixed_route.is_dynamic=FALSE

#property description: file name of the fixed route to be change in air if is_dynamic is true
#data type: String   <->   file name
prop.mosa.fixed_route.file_waypoints_dyn=route-4wp-dyn.txt

#-----------------------PROPERTIES ROUTE SIMPLIFIER---------------------

#property description: directory where is the route simplifier algorithm
#data type: String   <->   relative path
prop.route_simplifier.dir=../Modules-Global/Route-Simplifier/
 
#property description: factor of simplification of route
#data type: double
#interval: [0.064, 1.000]   <->   interval with interesting values 
#small factor: little compression of route data.
#big factor:   big compression of route data.
#recommended: 0.30
prop.route_simplifier.factor=0.20

#-----------------------PROPERTIES GENERAL SYSTEM-----------------------

#property description: maximum altitude of controller
#data type: double
#unit of measurement: meters
#interval: [min_alt, +infiny)
#recommended: 50.0
prop.controller.max_alt=50.0

#property description: minimum altitude of controller
#data type: double
#unit of measurement: meters
#interval: [0, max_alt]
#recommended: 1.0
prop.controller.min_alt=1.0

#property description: displacement factor of controller
#data type: double
#unit of measurement: meters
#interval: [0, +infiny)
#recommended: 3.0
prop.controller.displacement_factor=3.0

#property description: horizontal error gps
#data type: double
#unit of measurement: meters
#interval: [0, +infiny)
#recommended: 1.0
prop.sensors.gps.error.horizontal=1.5

#property description: vertical error barometer
#data type: double
#unit of measurement: meters
#interval: [0, +infiny)
#recommended: 0.5
prop.sensors.barometer.error.vertical=0.5

#---------------------PROPERTIES CHANGE OF BEHAVIOR---------------------

#property description: directory where is the route standard for mission
#data type: String   <->   relative path
prop.behavior.dir=../Modules-MOSA/Route-Standard4m/

#property description: type of behavior of drone
#data type: String   <->   [CIRCLE, TRIANGLE, RECTANGLE] 
#CIRCLE    -> behavior of drone is flight in circle format
#TRIANGLE  -> behavior of drone is flight in triangle format
#RECTANGLE -> behavior of drone is flight in rectangle format
prop.behavior.type=CIRCLE

#property description: level of discretization of route
#data type: int
#interval: [3, +infiny)
prop.behavior.discretization=16

#property description: radius of circle
#data type: double
#unit of measurement: meters
#interval: (0, +infiny)
prop.behavior.radius_circle=8.0

#property description: base of triangle
#data type: double
#unit of measurement: meters
#interval: (0, +infiny)
prop.behavior.base_triangle=16.0

#property description: base of rectangle
#data type: double
#unit of measurement: meters
#interval: (0, +infiny)
prop.behavior.base_rectangle=16.0
